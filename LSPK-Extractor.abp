'TheLastStory pk pkh pfs Extractor	Programmed by RGBA_CRT 2017. Lang : ActiveBasic v4
'v1.0 : 書き直し
'v2.0 : PKH24（4GB以上対応版）に対応
'v2.1 : 圧縮フォーマット推定機能追加, オプション変更

#include<RGBALib.sbp>
#include "LSPK-lib.sbp"
#console
Const DEFAULT_DECOMPRESSER = "DSDecmp.exe"
Dim decPath As BytePtr

Print ex"The Last Story .pk .pkh .pfs Extracter v2.1         Programmed by RGBA_CRT 2016-2019\n"

'デフォルトでDSD
setDecompExeName(DEFAULT_DECOMPRESSER)
Main()
End

/*
Enum LSPK_MODE
	LSPKM_EXTRACT
	LSPKM_VIEW
	LSPKM_FIND
End Enum
*/

Sub Main()
	Dim noDecomp As BOOL
	Dim viewMode As BOOL
	Dim silent AS BOOL
	Dim target AS String
	Dim deompExe AS BytePtr
	Dim findName AS BytePtr
	Dim cmd AS CommandLine
	Dim i aS Long

	silent=TRUE
#IFDEF _DEBUG
	cmd.ParseCommandLine("lp archive.pk /e ")
#ENDIF

	For i = 1 To cmd.GetCount()
		if cmd.cmpCmd(i,"/l") then
			Print "Listup files."
			viewMode=TRUE

		Elseif cmd.cmpCmd(i,"/e") then
			Print "Extract only Mode (no decompress)"
			noDecomp=TRUE

		Elseif cmd.cmpCmd(i,"/v") then
			Print "Verbose mode."			
			silent=FALSE

		Else if cmd.cmpCmd(i,"/f") then
			i++
			findName=cmd.GetCmd(i)
			Print "Find file : %s"
			viewMode=TRUE

		Elseif cmd.cmpCmd(i,"/dec") then
			i++
			setDecompExeName(cmd.GetCmd(i))
			if IsFilePath(decPath)=FALSE Then
				'noDecomp=TRUE
				printf(ex"decompresser not found : %s\n",decPath)
				End
			Else
				printf(ex"decompresser : %s\n",decPath)
			End If

		Else
			if IsFilePath(cmd.GetCmd(i))=TRUE Then
				target=cmd.GetCmdString(i)
			endif
		endif
	Next i

	if target="" Then PrintUsage():End

	printf(ex"Load:%s\n\n",target)
	if viewMode Then
		viewArchive(target)
	Else
		extractArchive(target,noDecomp,silent)
	End If

End Sub

Sub PrintUsage()
	printf(ex"Usage : PrintUsaget [/v][/l][/e][/dec exename] pkfile\n\t/v - Verbose mode.\n\t/l - Listup files.\n\t/e - Extract only (do not decompless) mode.\n\t/dec - Chenge decompresser.\n")
EndSub

Sub setDecompExeName(exename As BytePtr)
	if decPath<>NULL Then free(decPath)
	Dim bp As BinalyDirectory
	Dim tmp AS BytePtr
	tmp=bp.MakePath(exename)
	decPath=calloc(lstrlen(tmp)+1)
	lstrcpy(decPath,tmp)
End Sub

Sub viewArchive(target AS BytePtr)
	Dim lspk As LSPK_ARCHIVE,conf AS LSPK_EA_USERDATA
		
	if lspk.openArchive(target,FALSE,FALSE,TRUE)=FALSE Then 
		printf(ex"Archive Open Error!!! %s (GLE=%d, iEID=%d)\n",lspk.getLastErrorText(),GetLastError(),lspk.getLastErrorID())
		ExitSub
	Endif

	printPkInfo(VarPtr(lspk))

	PrintPtr(Ex"Archive Contents List:")

	'時間計測
	Dim lt AS DWord
	lt = GetTickCount()
	lspk.slvDir(0,FALSE,NULL,AddressOf(listupCallback),NULL,0)
	lt = GetTickCount() - lt

	printf(ex"\ntotal dir %d, file %d, process time %dms\n",lspk.pfs.GetAllDirCount(),lspk.pfs.GetAllFileCount(),lt)
	Print "-";Date$();Time$()
End Sub

Type LSPK_EA_USERDATA
	cLSPK AS *LSPK_ARCHIVE
	dirName AS BytePtr
	noDecomp AS BOOL
	silent AS BOOL
End Type

Sub extractArchive(target AS BytePtr, noDecomp AS BOOL, silent AS BOOL)
	Dim lspk As LSPK_ARCHIVE,conf AS LSPK_EA_USERDATA
	if lspk.openArchive(target)=FALSE Then
'		Print "OpenError"
		printf("Archive Open Error!!! GLE=%d",GetLastError())
		'ExitSub
	End If
	
	printPkInfo(VarPtr(lspk))

	conf.cLSPK=VarPtr(lspk)
	conf.dirName=lspk.getArchiveName()
	conf.noDecomp=noDecomp
	conf.silent=silent

	CreateDirectory(conf.dirName,ByVal NULL)
	
	PrintPtr(Ex"Extracting.")
	lspk.slvDir(0,FALSE,NULL,AddressOf(extractCallback),VarPtr(conf),0)

	printf(Ex"\ntotal dir %d, file %d\n",lspk.pfs.GetAllDirCount(),lspk.pfs.GetAllFileCount())
End Sub

'ファイルリストアップ
Function listupCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	if hFind->isDir=FALSE Then
		Dim cur As *LSPK_FILEINFO
		cur=info As *LSPK_FILEINFO
		cur->path->SetPath(path->GetPath())
		printFileInfo(info As *LSPK_FILEINFO)
	End If
	listupCallback=TRUE
End Function

'ディレクトリリストアップ
Function treeCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	if hFind->isDir Then
		Dim cur As *LSPK_DIRINFO
		cur=info As *LSPK_DIRINFO
		
		printIndent(lv+1)
		printf(ex"[%d]%s\n",cur->index,cur->name)
	End If
	treeCallback=TRUE
End Function

'ファイル名で検索
Function findCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	if hFind->isDir=FALSE Then
		Dim cur As *LSPK_FILEINFO
		cur=info As *LSPK_FILEINFO
	
		Dim pfsName As BytePtr
		pfsName=cur->path->GetFileName()

		if lstrcmpi(pfsName,userdata)=0 Then
			cur->path->SetPath(path->GetPath())
			printFileInfo(info As *LSPK_FILEINFO)
			Dim savepath As StringClass,filename As BytePtr
			filename=path->GetFileName()
			savepath.sprintf("found\[pk-%08X]%s",cur->pkh->offset,filename)
			free(filename)
			if saveFile(VarPtr(test),info,savepath.ptr)=FALSE then Print "save err";:debug:GetLastError()
		End If

	End If
	findCallback=TRUE
End Function

'展開
Function extractCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	Dim savep As StringClass,conf AS *LSPK_EA_USERDATA
	conf=userdata
	savep.sprintf("%s\%s",conf->dirName,path->GetPath())

	if hFind->isDir Then
		CreateDirectory(savep.ptr,ByVal NULL)
	Else
		Dim cur As *LSPK_FILEINFO
		cur=info As *LSPK_FILEINFO

		if conf->silent=FALSE Then
			printFileInfo(info,path->GetPath())
		Else
			PrintPtr(".")
		Endif

		SetLastError(0)
		if saveFile(conf->cLSPK,info,savep.ptr)=FALSE  then 
			if conf->silent Then PrintPtr(Ex"\n")

			if cur->pkh->com_size = 0 Then
				PrintPtr(Ex"[DELETED]") 
			Else
				printf(ex"[SAVE ERR %d]",GetLastError())
			Endif
			printFileInfo(info,path->GetPath())	

			extractCallback=TRUE
			ExitFunction
		End If
		
		if conf->noDecomp=FALSE Then ExecDecompress(savep.ptr)
	End If
	extractCallback=TRUE
End Function

'圧縮解除コマンドの実行
Function ExecDecompress(fileName As BytePtr) As BOOL
	Dim cmd As *StringClass
	cmd=new StringClass()
	cmd->sprintf(ex"\q%s %s\q",decPath,fileName)
	cmd->replaceChar("/","\")
	cmd->insertHead("/c ")

	'printf(ex"[cmd] %s\n", cmd->ptr)
	ShellExecute(NULL, "open", "cmd.exe", cmd->ptr, "", SW_HIDE)
	delete cmd
End Function

'PKファイルの中身を保存
Function saveFile(cLA As *LSPK_ARCHIVE,info As *LSPK_FILEINFO,saveFileName As BytePtr) As BOOL
	Dim buffer As BytePtr

/*	buffer=cLA->getFileBuffer(info)
	if buffer=NULL Then debug*/
	buffer=cLA->getFileBuffer(info)
	if buffer=NULL Then 
		ExitFunction
	endif

/*	Dump(buffer,64,info->pkh->offset)
	Print "gwl;";GetLastError()
*/
	Dim out As *File
	out = new File()
	if out->openFile(saveFileName,GENERIC_WRITE)=FALSE Then ExitFunction
	out->write(buffer,info->pkh->com_size)
	out->close()
	delete out

	free(buffer)
	saveFile=TRUE
End Function

Sub printIndent(deps As Long)
	Dim i As Long
	For i= 0 To deps*2
		PrintPtr(" ",1)
	Next i
End Sub

Sub printFileInfo(info As  *LSPK_FILEINFO)(fullPath As BytePtr)
	Dim size As DWord,sig As BytePtr,dispPath As BytePtr
	if fullPath=NULL Then
		dispPath=info->path->GetPath()
	Else
		dispPath=fullPath
	End If

	if info->pkh->com_size > &H100000 Then
		sig="M"
		size=info->pkh->com_size / &H100000
	Elseif info->pkh->com_size > &H0400 Then
		sig="K"
		size=info->pkh->com_size / &H0400
	Else
		sig="B"
		size=info->pkh->com_size
	End If

	'ベンチマーク結果
	'テスト対象：Archive.pk
	'printf  = 1482ms 1450ms
	'printf2 = 1436ms 1467ms
	'かわらん！
	printf(ex"[%6d hs:%08X ad:%02X %08X si:%4d%s] %s\n", _ 
		info->index,_
		info->hash,_
		info->pkh->offsetHigh, info->pkh->offsetLow,_
		size,_
		sig ,_
		dispPath	
	)

End Sub



Sub printPkInfo(lspk AS *LSPK_ARCHIVE)
	Dim compressType AS LSPK_COMPRESS_TYPE
	Dim maybeZlib As BOOL
	Dim i AS Long

	' 圧縮フォーマットが確定するまで6つぐらい検査
	For i=0 To 5
		compressType = lspk->checkCompressType(i)
		if compressType = LSPK_CTYPE_UNKNOWN Then
			continue
		Else if compressType = LSPK_CTYPE_ZLIB_2 Then
			maybeZlib = TRUE
			continue
		End If

		maybeZlib = FALSE
		ExitFor
	Next

	if maybeZlib Then
		compressType=LSPK_CTYPE_ZLIB
		debug
	Endif

	PrintPtr(ex"PkInfo:\n")
	if lspk->pk.getHandle() = NULL Then
		PrintPtr(ex" (PK file not loaded.)\n")
	Else
		PrintPtr(Ex" File Size : ")
		PrintDataCap(lspk->pk.lengthQWord(),TRUE)
		PrintPtr(Ex"\n")
	Endif

	printf(Ex" Compress Type : %s\n",_
		LSPK_COMPRESS_TYPE_TEXT_TBL[compressType]		
	)


	PrintPtr(ex"\n")
End Sub
