'TheLastStory pk pkh pfs Extractor	Programmed by RGBA_CRT 2017. Lang : ActiveBasic v4
'v1.0 : 書き直し
'v2.0 : PKH24（4GB以上対応版）に対応
'v2.1 : 圧縮フォーマット推定機能追加, オプション変更

Enum LSPK_DECOMPRESS_METHOD
	LSPK_DM_NULL = 0
	LSPK_DM_NODECOMP
	LSPK_DM_DLL
	LSPK_DM_EXE
	_LSPK_DM_COUNT
End Enum

Dim LSPK_DECOMPRESS_METHOD_LABEL[_LSPK_DM_COUNT] = [ _
	"Unknown",_
	"Not decompress",_
	"Using decompressor DLL",_
	"Using command line",_
	"_LSPK_DM_COUNT"
] AS BytePtr

#include<RGBALib.sbp>
#include<abcdecl.sbp>
#include<zlib.sbp>
#include "LSPK-lib.sbp"
#include "lz11.sbp"
#console
Const DEFAULT_DECOMPRESSER = "DSDecmp.exe"
Dim decPath As BytePtr

Print ex"The Last Story .pk .pkh .pfs Extracter v2.1         Programmed by RGBA_CRT 2016-2019\n"

Dim zlib AS ZlibWrapper
zlib.init()

Dim lz11 AS lz11_DllWrapper
lz11.init()

'デフォルトでDSD
setDecompExeName(DEFAULT_DECOMPRESSER)
Main()
End




Sub Main()
	Dim viewMode As BOOL
	Dim silent AS BOOL
	Dim target AS String
	Dim deompExe AS BytePtr
	Dim findName AS BytePtr
	Dim cmd AS CommandLine
	Dim i aS Long
	Dim compressType As LSPK_COMPRESS_TYPE
	Dim decompressMethod As LSPK_DECOMPRESS_METHOD

	compressType = LSPK_CTYPE_UNKNOWN
	decompressMethod=LSPK_DM_NULL

	silent=TRUE
#IFDEF _DEBUG
	cmd.ParseCommandLine("lp boot.pk /v ")
#ENDIF

	For i = 1 To cmd.GetCount()
		if cmd.cmpCmd(i,"/l") then
			Print "Listup files."
			viewMode=TRUE

		Elseif cmd.cmpCmd(i,"/e") then
			Print "Extract only Mode (no decompress)"
			decompressMethod=LSPK_DM_NODECOMP

		Elseif cmd.cmpCmd(i,"/v") then
			Print "Verbose mode."			
			silent=FALSE

		Else if cmd.cmpCmd(i,"/f") then
			i++
			findName=cmd.GetCmd(i)
			Print "Find file : %s"
			viewMode=TRUE

		Else if cmd.cmpCmd(i,"/zlib") then
			compressType = LSPK_CTYPE_ZLIB

		Else if cmd.cmpCmd(i,"/lz1x") then
			compressType = LSPK_CTYPE_LZ1X

		Elseif cmd.cmpCmd(i,"/dec") then
			i++
			setDecompExeName(cmd.GetCmd(i))
			if IsFilePath(decPath)=FALSE Then
				'noDecomp=TRUE
				printf(ex"decompresser not found : %s\n",decPath)
				End
			Else
				printf(ex"decompresser : %s\n",decPath)
			End If
			decompressMethod = LSPK_DM_EXE

		Else
			if IsFilePath(cmd.GetCmd(i))=TRUE Then
				target=cmd.GetCmdString(i)
			endif
		endif
	Next i

	if target="" Then PrintUsage():End

	printf(ex"Load:%s\n\n",target)
	if viewMode Then
		viewArchive(target)
	Else
		extractArchive(target, silent, compressType, decompressMethod)
	End If

End Sub

Sub PrintUsage()
	printf(ex"Usage : PrintUsaget [/v][/l][/e][/dec exename] pkfile\n\t/v - Verbose mode.\n\t/l - Listup files.\n\t/e - Extract only (do not decompless) mode.\n\t/dec - Chenge decompresser.\n")
EndSub

Sub setDecompExeName(exename As BytePtr)
	if decPath<>NULL Then free(decPath)
	Dim bp As BinalyDirectory
	Dim tmp AS BytePtr
	tmp=bp.MakePath(exename)
	decPath=calloc(lstrlen(tmp)+1)
	lstrcpy(decPath,tmp)
End Sub

Sub viewArchive(target AS BytePtr)
	Dim lspk As LSPK_ARCHIVE,conf AS LSPK_EA_USERDATA
		
	if lspk.openArchive(target,FALSE,FALSE,TRUE)=FALSE Then 
		printf(ex"Archive Open Error!!! %s (GLE=%d, iEID=%d)\n",lspk.getLastErrorText(),GetLastError(),lspk.getLastErrorID())
		ExitSub
	Endif

	printPkInfo(VarPtr(lspk))

	PrintPtr(Ex"Archive Contents List:")

	'時間計測
	Dim lt AS DWord
	lt = GetTickCount()
	lspk.slvDir(0,FALSE,NULL,AddressOf(listupCallback),NULL,0)
	lt = GetTickCount() - lt

	printf(ex"\ntotal dir %d, file %d, process time %dms\n",lspk.pfs.GetAllDirCount(),lspk.pfs.GetAllFileCount(),lt)
	Print "-";Date$();Time$()
End Sub

Type LSPK_EA_USERDATA
	cLSPK AS *LSPK_ARCHIVE
	dirName AS BytePtr
	decompMethod AS LSPK_DECOMPRESS_METHOD
	silent AS BOOL
End Type

Sub extractArchive(target AS BytePtr, silent AS BOOL, compressType As LSPK_COMPRESS_TYPE, decMethod As LSPK_DECOMPRESS_METHOD)
	Dim lspk As LSPK_ARCHIVE,conf AS LSPK_EA_USERDATA
	if lspk.openArchive(target)=FALSE Then
'		Print "OpenError"
		printf("Archive Open Error!!! GLE=%d",GetLastError())
		'ExitSub
	End If

	' 圧縮タイプの指定がある場合は設定
	if compressType <> LSPK_CTYPE_UNKNOWN Then
		lspk.compressType = compressType
	Endif
	
	printPkInfo(VarPtr(lspk))

	conf.cLSPK=VarPtr(lspk)
	conf.dirName=lspk.getArchiveName()
'	conf.noDecomp=noDecomp
	conf.silent=silent

	if decMethod = LSPK_DM_NULL Then
		conf.decompMethod = LSPK_DM_DLL
	Else
		conf.decompMethod = decMethod
	Endif
	
	if lspk.compressType = LSPK_CTYPE_ZLIB Then
		if zlib.isUsable() = FALSE Then
			Print "Error: zlib not found."
			end
		End If
	Else if lspk.compressType = LSPK_CTYPE_LZ1X then
		if lz11.isUsable() = FALSE Then
			Print "Error: lz11.dll not found."
			end
		End If
	End If
	
	if conf.silent = FALSE Then
		printf(ex"Decompress Type: %s\nDecompress Method: %s\n\n", LSPK_COMPRESS_TYPE_TEXT_TBL[lspk.compressType], LSPK_DECOMPRESS_METHOD_LABEL[conf.decompMethod])
	End If


	CreateDirectory(conf.dirName,ByVal NULL)
	
	PrintPtr(Ex"Extracting.")
	if conf.silent = FALSE Then PrintPtr(ex"\n")

	' 時間計測
	Dim lt AS DWord
	lt = GetTickCount()

	' 展開開始
	lspk.slvDir(0,FALSE,NULL,AddressOf(extractCallback),VarPtr(conf),0)

	' タイマーストップ
	lt = GetTickCount() - lt
	
	printf(ex"\ntotal dir %d, file %d, process time %dms\n",lspk.pfs.GetAllDirCount(),lspk.pfs.GetAllFileCount(),lt)
End Sub

'ファイルリストアップ
Function listupCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	if hFind->isDir=FALSE Then
		Dim cur As *LSPK_FILEINFO
		cur=info As *LSPK_FILEINFO
		cur->path->SetPath(path->GetPath())
		printFileInfo(info As *LSPK_FILEINFO)
	End If
	listupCallback=TRUE
End Function

'ディレクトリリストアップ
Function treeCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	if hFind->isDir Then
		Dim cur As *LSPK_DIRINFO
		cur=info As *LSPK_DIRINFO
		
		printIndent(lv+1)
		printf(ex"[%d]%s\n",cur->index,cur->name)
	End If
	treeCallback=TRUE
End Function

'ファイル名で検索
Function findCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	if hFind->isDir=FALSE Then
		Dim cur As *LSPK_FILEINFO
		cur=info As *LSPK_FILEINFO
	
		Dim pfsName As BytePtr
		pfsName=cur->path->GetFileName()

		if lstrcmpi(pfsName,userdata)=0 Then
			cur->path->SetPath(path->GetPath())
			printFileInfo(info As *LSPK_FILEINFO)
			Dim savepath As StringClass,filename As BytePtr
			filename=path->GetFileName()
			savepath.sprintf("found\[pk-%08X]%s",cur->pkh->offset,filename)
			free(filename)
			if saveFile(VarPtr(test),info,savepath.ptr)=FALSE then Print "save err";:debug:GetLastError()
		End If

	End If
	findCallback=TRUE
End Function

'展開
Function extractCallback(hFind As LSPK_FINDHANDLE,info As VoidPtr,path As *FilePath,userdata As VoidPtr,lv As Long) As BOOL
	Dim savep As StringClass,conf AS *LSPK_EA_USERDATA
	conf=userdata
	savep.sprintf("%s\%s",conf->dirName,path->GetPath())

	if hFind->isDir Then
		CreateDirectory(savep.ptr,ByVal NULL)
	Else
		Dim cur As *LSPK_FILEINFO
		cur=info As *LSPK_FILEINFO

		if conf->silent=FALSE Then
			printFileInfo(info,path->GetPath())
		Else
			PrintPtr(".")
		Endif

		SetLastError(0)
		if saveFile(conf->cLSPK,info,savep.ptr, conf)=FALSE  then 
			if conf->silent Then PrintPtr(Ex"\n")

			if cur->pkh->com_size = 0 Then
				PrintPtr(Ex"[DELETED]") 
			Else
				printf(ex"[SAVE ERR %d]",GetLastError())
			Endif
			printFileInfo(info,path->GetPath())	

			extractCallback=TRUE
			ExitFunction
		End If
		
		if conf->decompMethod=LSPK_DM_EXE Then ExecDecompress(savep.ptr)
	End If
	extractCallback=TRUE
End Function

'圧縮解除コマンドの実行
Function ExecDecompress(fileName As BytePtr) As BOOL
	Dim cmd As *StringClass
	cmd=new StringClass()
	cmd->sprintf(ex"\q%s %s\q",decPath,fileName)
	cmd->replaceChar("/","\")
	cmd->insertHead("/c ")

	'printf(ex"[cmd] %s\n", cmd->ptr)
	ShellExecute(NULL, "open", "cmd.exe", cmd->ptr, "", SW_HIDE)
	delete cmd
End Function

'PKファイルの中身を保存
Function saveFile(cLA As *LSPK_ARCHIVE,info As *LSPK_FILEINFO,saveFileName As BytePtr, config As *LSPK_EA_USERDATA) As BOOL
	Dim buffer As BytePtr, saveBuffer AS BytePtr

	buffer=cLA->getFileBuffer(info)
	if buffer=NULL Then 
		ExitFunction
	endif

	Dim fileSize As DWord
	if config->decompMethod = LSPK_DM_DLL Then
		'解凍する
		saveBuffer = calloc(info->pkh->dec_size)
		if info->pkh->hash = &HF8FEF72F Then debug
		if lspkDecompress(buffer, info->pkh->com_size, saveBuffer, info->pkh->dec_size, cLA->compressType,ByVal VarPtr(fileSize)) = FALSE Then
			' 割とデータエラーで解凍できないことがある。
			' エラー発生時は生のママ保存する
			free(saveBuffer)
			saveBuffer = buffer
			fileSize = info->pkh->com_size
		Else
			' 成功時
			fileSize = info->pkh->dec_size

		End If

	Else
		'解答しない
		saveBuffer = buffer
		fileSize = info->pkh->com_size

	End If

	Dim out As *File
	out = new File()
	if out->openFile(saveFileName,GENERIC_WRITE)=FALSE Then ExitFunction

	out->write(saveBuffer,fileSize)

	out->close()
	delete out

	if saveBuffer <> buffer Then
		free(saveBuffer) : saveBuffer = NULL
	Endif

	free(buffer) : buffer = NULL

	saveFile=TRUE
End Function

Sub printIndent(deps As Long)
	Dim i As Long
	For i= 0 To deps*2
		PrintPtr(" ",1)
	Next i
End Sub

Sub printFileInfo(info As  *LSPK_FILEINFO)(fullPath As BytePtr)
	Dim size As DWord,sig As BytePtr,dispPath As BytePtr
	if fullPath=NULL Then
		dispPath=info->path->GetPath()
	Else
		dispPath=fullPath
	End If

	if info->pkh->com_size > &H100000 Then
		sig="M"
		size=info->pkh->com_size / &H100000
	Elseif info->pkh->com_size > &H0400 Then
		sig="K"
		size=info->pkh->com_size / &H0400
	Else
		sig="B"
		size=info->pkh->com_size
	End If

	'ベンチマーク結果
	'テスト対象：Archive.pk
	'printf  = 1482ms 1450ms
	'printf2 = 1436ms 1467ms
	'かわらん！
	printf(ex"[%6d hs:%08X ad:%02X %08X si:%4d%s] %s\n", _ 
		info->index,_
		info->hash,_
		info->pkh->offsetHigh, info->pkh->offsetLow,_
		size,_
		sig ,_
		dispPath	
	)

End Sub



Sub printPkInfo(lspk AS *LSPK_ARCHIVE)


	PrintPtr(ex"PkInfo:\n")
	if lspk->pk.getHandle() = NULL Then
		PrintPtr(ex" (PK file not loaded.)\n")
	Else
		PrintPtr(Ex" File Size : ")
		PrintDataCap(lspk->pk.lengthQWord(),TRUE)
		PrintPtr(Ex"\n")
	Endif

	printf(Ex" Compress Type : %s\n",_
		LSPK_COMPRESS_TYPE_TEXT_TBL[lspk->compressType]		
	)


	PrintPtr(ex"\n")
End Sub

Function lspkDecompress(srcBuf AS BytePtr, srcLen AS DWord, destBuf AS BytePtr, destLen AS DWord, comType AS LSPK_COMPRESS_TYPE,ByRef newSize AS Long) AS BOOL
'	printf(ex"comType:%d\n", comType)

	Dim lib_ret AS Long

	if comType = LSPK_CTYPE_ZLIB Then
		newSize = destLen

		lib_ret = zlib.uncompress(destBuf, ByVal VarPtr(newSize), srcBuf, srcLen)

		if lib_ret = Z_DATA_ERROR Then
			if srcLen = destLen Then
				' srcLen = destLen のとき、無圧縮データが格納されている場合が多い。
				' エラーではないので、zlib_retを握りつぶす
				lib_ret = Z_OK
				memcpy(destBuf,srcBuf, destLen)
			Else
				debug
			End If
		End If

		if lib_ret <> Z_OK Then
			printf(ex"zlib uncompress error: %d\n", lib_ret)
			lspkDecompress = FALSE
			debug
			if lib_ret <> -3 then debug
		Else
			lspkDecompress = TRUE
		Endif

	Elseif comType = LSPK_CTYPE_LZ1X Then
		lib_ret = lz11.lz11_decompress(srcBuf, srcLen, destBuf, destLen, ByVal VarPtr(newSize))

		if lib_ret <> LZ_OK Then
			if srcLen = destLen Then
				' srcLen = destLen のとき、無圧縮データが格納されている場合が多い。
				' エラーではないので、zlib_retを握りつぶす
				lib_ret = LZ_OK
				memcpy(destBuf,srcBuf, destLen)
			Else
				debug
			End If
		End If

		if lib_ret <> LZ_OK Then
			printf(ex"lz11 uncompress error: %d\n", lib_ret)
			lspkDecompress = FALSE
		Else
			lspkDecompress = TRUE
		Endif

	Else
		printf(ex"[Err]Unsupported compress format.\n")
	End If
End Function 