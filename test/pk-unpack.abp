#include<RGBALib.sbp>
#console
Main()
Sleep(-1)
		Dim CurrentPath[MAX_PATH] As Byte
Dim hPack As HANDLE

Sub Main()
	Print "The Last Story .pk Extracter              Programmed by RGBA_CRT 2016"

	if IsFilePath("DSDecmp.exe") = FALSE Then Print "DSDecmp.exe is not exist":End

	Dim path As String , dPath As BytePtr
	Input ex"D&D .pk file\n>",path
'	path="camp.ddd"
	dPath=DelDQ(path)

	'拡張子削除
	Dim i As Long
	For i= lstrlen(dPath) To 0 Step -1
		if dPath[i]=Asc("\") Then ExitFor'拡張子なし
		if dPath[i]=Asc(".") Then
			dPath[i]=0
			ExitFor
		Endif
	Next i

	Dim pkh As PKH_READER

	'Load file and check
	if pkh.LoadPkhFile(MakeStr(dPath)+".pkh") <> 0 Then printf("File open error : %s.pkh",dPath):ExitSub
	'if pfs.LoadPfsFile(MakeStr(dPath)+".pfs") <> 0 Then	printf("File open error : %s.pfs",dPath):ExitSub
'	if pkh.GetFileCount() <> pfs.GetAllFileCount() Then printf("File count not match."):ExitSub
	hPack=OpenFile(MakeStr(dPath)+".pk",GENERIC_READ)
	if hPack = -1 Then printf("File open error : %s.pk",dPath):ExitSub

	For i= lstrlen(dPath) To 0 Step -1
		if dPath[i]=Asc("\") Then ExitFor'拡張子なし
	Next i
	i++

	lstrcpy(CurrentPath,dPath)
	lstrcat(CurrentPath,"-undir\")
	CreateDirectory(CurrentPath,ByVal NULL)

	Dim fNameBuffer[MAX_PATH] As Byte
	For i = 0 To pkh.GetFileCount()-1
		printf(ex"Processing : %08X\n",pkh.GetOffset(i))
		wsprintf(fNameBuffer,"%s%08X.txt",CurrentPath,pkh.GetOffset(i))
		DecompressPK(pkh.GetOffset(i),pkh.GetCmpSize(i),fNameBuffer)
	Next i

	Print 
	Print "Extract successfull!!!"
EndSub

Sub DecompressPK(Address As DWord,CmpSize As DWord,FileName As BytePtr)

	Dim pkBuf As BytePtr
	SetFilePointer(hPack,Address,0,FILE_BEGIN)
	pkBuf=calloc(CmpSize)
	LoadFile(hPack,pkBuf,CmpSize)

	Dim hOut As HANDLE
	hOut=OpenFile(FileName,GENERIC_WRITE)
	if hOut=-1 Then printf("File output error : %s",FileName)
	OutFile(hOut,pkBuf,CmpSize)
	CloseHandle(hOut)

	if CmpSize=0 Then ExitSub

	Dim cmdLine[MAX_PATH] As Byte
	wsprintf(cmdLine,"DSDecmp.exe %s",FileName)
	SirentExec(cmdLine)

EndSub

Function SirentExec(ProgramName As BytePtr) As BytePtr
	Dim read As HANDLE
	Dim write As HANDLE
	Dim sa As SECURITY_ATTRIBUTES
	Dim StartInfo As STARTUPINFO
	Dim ProInfo As PROCESS_INFORMATION
/*	Dim len As Dword
	Dim buf As BytePtr
	Dim Ret As Long
	Dim BC As DWord
	Dim PipeSize As DWord
*/
	sa.nLength				=	sizeof(SECURITY_ATTRIBUTES)
	sa.lpSecurityDescriptor	=	0
	sa.bInheritHandle		=	TRUE

	FillMemory(VarPtr(StartInfo),sizeof(STARTUPINFO),0)
	StartInfo.cb			=	sizeof(STARTUPINFO)
	StartInfo.dwFlags		=	STARTF_USESTDHANDLES
	StartInfo.wShowWindow	= 	SW_HIDE
	StartInfo.hStdOutput	=	write
	StartInfo.hStdError		=	write
'	StartInfo.hStdInput		=	read

	CreateProcess(NULL, ProgramName,ByVal NULL,ByVal NULL, TRUE, CREATE_NO_WINDOW, NULL,NULL, StartInfo, ProInfo )
	
	WaitForSingleObject( ProInfo.hProcess, 1000 )

	CloseHandle( ProInfo.hThread )
	CloseHandle( ProInfo.hProcess )


	CloseHandle( read )
	CloseHandle( write )
Endfunction


'---------------------------------------------------------------------------------------------
Type PKH_FILE_DATA
	unknown As DWord
	offset As DWord
	dec_size As DWord
	com_size As DWord
EndType

Class PKH_READER
Private
	cFile As DWord	'file count
	PKH_Table As *PKH_FILE_DATA
/*
	'PKとPFSのテーブルはPKに格納されている順番なので、オフセット順にテーブルを並べ替える
	Sub SortPKH_Table()
		PKHQSort(0,cFile-1)
		Print "PKH Table Sort Complate!"
	EndSub

	Sub PKHQSort(Left As Long,Right As Long)
		Dim i As Long, j As Long, pivot As Long
		i=Left 	:	j=Right
		pivot=PKH_Table[(Left+Right)/2].offset
		
		Do
			While PKH_Table[i].offset<pivot
				i++
			Wend
			While PKH_Table[j].offset>pivot
				j--
			Wend
			if i>=j Then 
				Exitdo
			Else
				SwapPKH_Table(i,j)
				i++
				j--
			endif
		Loop
		if Left<i-1 Then PKHQSort(Left,i-1)
		if j+1<Right Then PKHQSort(j+1,Right)
	EndSub

	Sub SwapPKH_Table(Index1 AS Long,Index2 As Long)
		Dim temp AS PKH_FILE_DATA
		'Index1 Save
		memcpy(VarPtr(temp),VarPtr(PKH_Table[Index1]),sizeof(PKH_FILE_DATA))
		'Index1 Set
		memcpy(VarPtr(PKH_Table[Index1]),VarPtr(PKH_Table[Index2]),sizeof(PKH_FILE_DATA))
		'Index2 Set from temp
		memcpy(VarPtr(PKH_Table[Index2]),VarPtr(temp),sizeof(PKH_FILE_DATA))
	EndSub*/

Public
	Sub ~PKH_READER()
		Destroy()
	EndSub

	Sub Destroy()
		cFile=0
		if PKH_Table<>0 Then free(PKH_Table):PKH_Table=0
	EndSub

	Function LoadPkhFile(FileName As BytePtr) As Long
		Dim hFile As HANDLE
		hFile=OpenFile(FileName,GENERIC_READ)
		if hFile=-1 or GetFileSize(hFile,NULL)<5 then LoadPkhFile=-1:Exitfunction

		Destroy()

		'Load File Count
		LoadFile(hFile,VarPtr(cFile),sizeof(DWord))
		ChangeEndianDW(cFile)
		if cFile*sizeof(PKH_FILE_DATA)+sizeof(DWord) <> GetFileSize(hFile,NULL) Then LoadPkhFile=-2:ExitFunction

		'Load PKH_FILE_DATA (.pk file offset data)
		PKH_Table=calloc(GetFileSize(hFile,NULL)+20)
		LoadFile(hFile,PKH_Table,GetFileSize(hFile,NULL)-sizeof(DWord))
		Dim i As Long
		For i = 0 To cFile-1
			ChangeEndianDW(PKH_Table[i].unknown)
			ChangeEndianDW(PKH_Table[i].offset)
			ChangeEndianDW(PKH_Table[i].com_size)
			ChangeEndianDW(PKH_Table[i].dec_size)
		Next i

		CloseHandle(hFile)

		'PKH Table をソート
		'SortPKH_Table()
	EndFunction

	Function GetPKH_Table(ID As DWord) As *PKH_FILE_DATA
		GetPKH_Table=VarPtr(PKH_Table[ID])
	EndFunction

	Function GetFileCount() As Long
		GetFileCount=cFile
	EndFunction

	Function GetOffset(ID As Long) As Long
		GetOffset=PKH_Table[ID].offset
	EndFunction

	Function GetCmpSize(ID As Long) As Long
		GetCmpSize=PKH_Table[ID].com_size
	EndFunction

	Function GetDecSize(ID As Long) As Long
		GetDecSize=PKH_Table[ID].dec_size
	EndFunction

End Class
/*
Sub ChangeEndianDW(ByRef in As DWord)
	Dim Tmp As Byte
	Dim value As *Byte
	value=VarPtr(in)
	Tmp=value[0]
	value[0]=value[3]
	value[3]=Tmp
	Tmp=value[1]
	value[1]=value[2]
	value[2]=Tmp
EndSub

	*/